/* Mixins */
@mixin gradl($grad) {
	@include background-image(linear-gradient($grad...));
}
@mixin abs0() {
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  margin: auto;
}
@mixin font-smoothing($val: antialiased) {
	-webkit-font-smoothing: $val;
	-moz-font-smoothing: $val;
	-ms-font-smoothing: $val;
	-o-font-smoothing: $val;
}
 @mixin prefix-values($property, $value, $prefixes: $default-prefixes) {
	 @each $prefix in $prefixes {
		  -#{$prefix}-#{$property}: #{$value};
	 }
	 #{$property}: #{$value};
}
@mixin clear() {
	&:before, &:after {
		content: "\0020";
		display: block;
		height: 0;
		overflow: hidden;
	}
	&:after {
		clear: both;
	}
}
@mixin linkTextOffscreen() {
	text-indent: 100%;
	white-space: nowrap;
	overflow: hidden;
}
@mixin hoverActiveFocus($property, $value) {
	&:hover, &:active, &:focus {
		#{$property}: $value;
	}
}
@mixin wh($width: false, $height: false) {
	$width: unquote($width);
	@if $height != none { 
		$height: unquote($height); }
		
	@if $height != false {
		width: #{$width};
		height: #{$height}; }
	@else {
		width: #{$width};
		height: #{$width}; }
}
@mixin letterpress($opacity){
	text-shadow:white($opacity) 0 1px 0;
}
@mixin rem($val, $base: 16) {
  @if unit($val) == "px" or (unitless($val)) {
	font-size: $val;
	font-size: rem($val, 16);
  } @else if unit($val) == "rem" {
	font-size: rem2px($val);
	font-size: $val;
  }
}
@mixin prem($prop, $val, $base: 16) {
  @if (unitless($val)) {
	$val: $val * 1rem;
  }
  @if $prop == "w" {
	width: rem2px($val);
	width: $val;
  } @else if $prop == "h" {
	height: rem2px($val);
	height: $val;
  } @else if $prop == "l" {
	letter-spacing: rem2px($val);
	letter-spacing: $val;
  } @else if $prop == "lh" {
	line-height: rem2px($val);
	line-height: $val;
  }
}
@mixin padrem($p1, $p2, $p3: 0, $p4: 0) {
  padding: rem2px($p1) rem2px($p2) rem2px($p3) rem2px($p4);
  padding: $p1 $p2 $p3 $p4;
}
@mixin marginrem($m1, $m2, $m3: 0, $m4: 0) {
  margin: rem2px($m1) rem2px($m2) rem2px($m3) rem2px($m4);
  margin: $m1 $m2 $m3 $m4;
}
@mixin hyphen() {
  -webkit-hyphens: auto;
  -moz-hyphens: auto;
	hyphens: auto;
  -ms-word-break: break-all;
	word-break: break-all;

	// Non standard for webkit
	word-break: break-word;

  -webkit-hyphens: auto;
  -moz-hyphens: auto;
	hyphens: auto;
					
  -webkit-hyphenate-before: 2;
  -webkit-hyphenate-after: 3;
	hyphenate-lines: 3;
}
@mixin liga() {
  -moz-font-feature-settings: "liga=1, dlig=1";
  -ms-font-feature-settings: "liga", "dlig";
  -webkit-font-feature-settings: "liga", "dlig";
  -o-font-feature-settings: "liga", "dlig";
  font-feature-settings: "liga", "dlig";
}
/* Functions */
@function black($opacity){
	@return rgba(0,0,0,$opacity)
}
@function white($opacity){
	@return rgba(255,255,255,$opacity)
}
@function strip-units($number) {
  @return $number / ($number * 0 + 1);
}
@function rem($pxval, $base: 16) {
  @if $pxval == 0 { @return 0 }
  @if (unitless($pxval)) {
	$pxval: $pxval * 1px;
  }

  @if (unitless($base)) {
	$base: $base * 1px;
  }

  @return $pxval / $base * 1rem;
}
@function rem2px($remval, $base: 1) {
  @if $remval == 0 { @return 0 }
  @if (unitless($remval)) {
	$remval: $remval * 1rem;
  }

  @if (unitless($base)) {
	$base: $base * 1rem;
  }

  @return $remval / $base * 16px;
}